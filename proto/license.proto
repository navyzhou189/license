

syntax="proto3";

package UnisAlgoLics;

service License {
	rpc CreateLics(CreateLicsRequest) returns (CreateLicsResponse) {}
	rpc DeleteLics(DeleteLicsRequest) returns(DeleteLicsResponse) {}
	rpc QueryLics(QueryLicsRequest) returns (QueryLicsResponse) {}
	rpc GetAuthAccess(GetAuthAccessRequest) returns (GetAuthAccessResponse) {}
	rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse) {}
}

enum Vendor {
	UNISINSIGHT = 0;
}

enum TaskType {
	PICTURE = 0;
	VIDEO = 1;
}

// do not mix user code with grpc error code, so we define it.
enum RespCode {
	OK = 0;
	CLIENT_NOT_EXIST = 1;
}

message Algorithm {
	Vendor vendor = 1;
	TaskType type = 2;
	int64 algorithmID = 3; // global and unique id
}

message AlgoLics {
	Algorithm algo = 1;
	int64 requestID = 2; // only used for video task
	int32 totalLics = 3;
	int32 usedLics = 4;
	int32 maxLimit = 5;
}

message CreateLicsRequest {
	/*
	 token is a global and unique id, allocted by server
	 client initilize the value to -1 before get authrized.
	*/
	int64 token = 1;
	Algorithm algo = 2;
	int32 clientExpectedLicsNum = 3;
}

message CreateLicsResponse {
	int64 token = 1;
	/*
	requestID is only used for video task, filled up by server.
	if picture task, filled up with -1.
	*/
	int64 requestID = 2; 
	Algorithm algo = 3;
	int32 clientGetActualLicsNum = 4;
	RespCode respcode = 5;
}

message DeleteLicsRequest {
	int64 token = 1;
	int64 requestID = 2; 
	Algorithm algo = 3;
	int32 licsNum = 4;
}

message DeleteLicsResponse {
	int64 token = 1;
	int64 requestID = 2; 
	Algorithm algo = 3;
	int32 licsNum = 4;
	RespCode respcode = 5;
}

message GetAuthAccessRequest {
	string ip = 1;
	int32 port = 2;
	/*
	if client is the first time to get access, filled up with -1, 
	otherwise filled up with  the value which get from  server
	*/
	int64 token = 3;
}

message GetAuthAccessResponse {
	int64 token = 1;
	RespCode respcode = 2;
}

message KeepAliveRequest {
	int64 token = 1;
	repeated AlgoLics lics = 2;
}

message KeepAliveResponse {
	int64 token = 1;
	repeated AlgoLics lics = 2;
	RespCode respcode = 3;
}


message QueryLicsRequest {
	int64 token = 1;
	int64 requestID = 2; 
	Algorithm algo = 3;
}

message QueryLicsResponse {
	int64 token = 1;
	int64 requestID = 2; 
	Algorithm algo = 3;
	int32 totalLics = 4;
	int32 usedLics = 5;
	RespCode respcode = 6;
}

